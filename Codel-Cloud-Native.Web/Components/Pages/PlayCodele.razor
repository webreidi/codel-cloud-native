@page "/playcodele"
@inject CodeleApiClient CodeleApi
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h3>Play Codele</h3>
<p>Guess the @maxLength letter, coding-related word in @maxAttempts tries or less!</p>

<br>

@if (gameSession != null)
{
    <p><strong>Attempt #: @(gameSession.Attempts + 1)</strong></p>
}

<!-- display the player's guesses -->
<table>
    @if (gameSession?.GuessHistory != null)
    {
        @foreach (var guessResult in gameSession.GuessHistory)
        {
            <tr>
                <div class="btn-group" role="group" aria-label="Basic example">
                    @foreach (var letterResult in guessResult.Letters)
                    {
                        char letter = Char.ToUpper(letterResult.Letter);
                        string buttonClass = GetButtonClass(letterResult.Status);
                        <button type="button" class="btn @buttonClass">@letter</button>
                    }
                </div>
            </tr>
            <br>
        }
    }
</table>
<br>

<!-- input box for the player to type and submit a guess -->
<input placeholder="Type your guess" @bind="newGuess" />

<button type="button" class="btn btn-primary" @onclick="SubmitGuess" disabled="@(gameSession?.IsComplete ?? false)">Submit</button>

<!-- display message if guess is not 5 characters long -->
@if (displayGuessSizeMsg == true)
{
    <p style="color: rgb(197, 3, 3);">Guess must be @maxLength characters long</p>
}

<!-- display error messages -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: rgb(197, 3, 3);">@errorMessage</p>
}

<!-- modal popup to display the game outcome -->
@if (showModal == true && gameSession != null)
{
    <div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true"
        role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">@gameStatusMessage</h4>
                </div>
                <div class="modal-body">
                    <p><strong>Total Attempts: </strong>@gameSession.Attempts / @gameSession.MaxAttempts</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" @onclick="StartNewGame">New Game?</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Current game session from API
    private GameSessionDto? gameSession;

    // the player's current guess
    private string? newGuess;

    // list of potential game answers (pulled from API)
    public CodeleWords[]? answers;

    const int maxAttempts = 5;
    const int maxLength = 5;

    // message to display in the modal popup depending on the game outcome
    private string? gameStatusMessage;

    // modal popup to display the game outcome
    private bool showModal { get; set; }

    // display message if guess is not 5 characters long
    private bool displayGuessSizeMsg { get; set; }

    // error message for API errors
    private string? errorMessage;

    // On load, set up the game
    protected override async Task OnInitializedAsync()
    {
        try
        {
            showModal = false;
            answers = await CodeleApi.GetSampleDataAsync();
            await StartNewGame();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to initialize game: {ex.Message}";
        }
    }

    // Reset and start a new game
    private async Task StartNewGame()
    {
        try
        {
            showModal = false;
            errorMessage = null;
            displayGuessSizeMsg = false;
            newGuess = string.Empty;
            
            gameSession = await CodeleApi.CreateGameSessionAsync();
            
            // Refresh the UI
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to start new game: {ex.Message}";
        }
    }

    // Close the game status modal
    private void ModalClose()
    {
        showModal = false;
    }

    // Submit and evaluate the player's guess
    private async Task SubmitGuess()
    {
        try
        {
            displayGuessSizeMsg = false;
            errorMessage = null;

            // check if guess is 5 characters long, display message if not
            if (newGuess != null && newGuess.Length != maxLength)
            {
                displayGuessSizeMsg = true;
                return;
            }

            if (string.IsNullOrWhiteSpace(newGuess) || gameSession == null)
            {
                return;
            }

            if (gameSession.IsComplete)
            {
                errorMessage = "Game is already complete. Start a new game.";
                return;
            }

            // Submit guess to API
            var response = await CodeleApi.SubmitGuessAsync(gameSession.GameId, newGuess);
            
            // Update game session with latest state
            gameSession = response.GameSession;

            // Check if game is complete
            if (gameSession.IsComplete)
            {
                showModal = true;
                gameStatusMessage = gameSession.IsWin ? "You Won!" : "You Lost!";
            }

            // clear the input box
            newGuess = string.Empty;
            
            // Refresh the UI
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to submit guess: {ex.Message}";
        }
    }

    private string GetButtonClass(string status)
    {
        return status switch
        {
            "Correct" => "btn-success",
            "IncorrectPosition" => "btn-warning",
            "Incorrect" => "btn-secondary",
            _ => "btn-secondary"
        };
    }

    public void ShowAlert()
    {
        JSRuntime.InvokeVoidAsync("alert", "New game started!");
    }
}
