@page "/playcodele"
@inject CodeleApiClient CodeleApi
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@using Codel_Cloud_Native.Web.DTOs

<h3>Play Codele</h3>
<p>Guess the @maxLength letter, coding-related word in @maxAttempts tries or less!</p>

<br>

<p><strong>Attempt #: @attempts</strong></p>

<!-- display the player's guesses -->
<table>
    @if (currentGame?.Guesses != null)
    {
        @foreach (var guess in currentGame.Guesses)
        {
            <tr>
                <div class="btn-group" role="group" aria-label="Basic example">
                    @foreach (var letter in guess.Letters)
                    {
                        char letterChar = Char.ToUpper(letter.Letter);
                        if (letter.Status == "Correct")
                        {
                            <button type="button" class="btn btn-success">@letterChar</button>
                        }
                        else if (letter.Status == "IncorrectPosition")
                        {
                            <button type="button" class="btn btn-warning">@letterChar</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-secondary">@letterChar</button>
                        }
                    }
                </div>
            </tr>
            <br>
        }
    }
</table>
<br>

<!-- input box for the player to type and submit a guess -->
<input placeholder="Type your guess" @bind="newGuess" disabled="@(currentGame?.IsComplete == true)" />

<button type="button" class="btn btn-primary" @onclick="SubmitGuess"
    disabled="@(currentGame?.IsComplete == true)">Submit</button>

<!-- display message if guess is not 5 characters long -->
@if (displayGuessSizeMsg == true)
{
    <p style="color: rgb(197, 3, 3);">Guess must be @maxLength characters long</p>
}

<!-- modal popup to display the game outcome -->
@if (showModal == true)
{
    <div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true"
        role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">@gameStatusMessage</h4>
                </div>
                <div class="modal-body">
                    @if (currentGame?.IsWin == true)
                    {
                        <p><strong>You guessed it: </strong>@(currentGame.Guesses.LastOrDefault()?.Word ?? "Unknown")</p>
                    }
                    else
                    {
                        <p>Better luck next time!</p>
                        @if (!string.IsNullOrEmpty(currentGame?.TargetWord))
                        {
                            <p><strong>The correct word was:</strong> @currentGame!.TargetWord</p>
                        }
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" @onclick="StartNewGame">New Game?</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    // Current game session
    private GameSessionDto? currentGame;

    // the player's current guess
    private string? newGuess;

    // # of tries the player has to guess the word
    public int attempts => currentGame?.Attempts ?? 0;

    // # of tries the player has to guess the word
    const int maxAttempts = 5;
    const int maxLength = 5;

    // message to display in the modal popup depending on the game outcome
    private string? gameStatusMessage;

    // modal popup to display the game outcome
    private bool showModal { get; set; }

    // display message if guess is not 5 characters long
    private bool displayGuessSizeMsg { get; set; }

    // On load, set up the game
    protected override async Task OnInitializedAsync()
    {
        await StartNewGame();
    }

    // Reset and start a new game
    private async Task StartNewGame()
    {
        showModal = false;
        newGuess = string.Empty;
        displayGuessSizeMsg = false;

        try
        {
            var gameResponse = await CodeleApi.CreateGameAsync();
            currentGame = await CodeleApi.GetGameAsync(gameResponse.GameId);
        }
        catch (Exception ex)
        {
            // Handle error - could show user-friendly message
            Console.WriteLine($"Error starting new game: {ex.Message}");
        }
    }

    // Close the game status modal
    private void ModalClose()
    {
        showModal = false;
    }

    // Submit and evaluate the player's guess
    private async Task SubmitGuess()
    {
        if (currentGame == null)
        {
            await StartNewGame();
            return;
        }

        // check if guess is 5 characters long, display message if not
        if (newGuess != null && newGuess.Length != maxLength)
        {
            displayGuessSizeMsg = true;
        }
        else
        {
            displayGuessSizeMsg = false;
            if (!string.IsNullOrEmpty(newGuess))
            {
                try
                {
                    currentGame = await CodeleApi.SubmitGuessAsync(currentGame.GameId, newGuess);

                    // Check game status
                    if (currentGame.IsComplete)
                    {
                        showModal = true;
                        gameStatusMessage = currentGame.IsWin ? "You Won!" : "You Lost!";
                    }

                    // clear the input box
                    newGuess = string.Empty;
                }
                catch (Exception ex)
                {
                    // Handle error - could show user-friendly message
                    Console.WriteLine($"Error submitting guess: {ex.Message}");
                }
            }
        }
    }

    public void ShowAlert()
    {
        JSRuntime.InvokeVoidAsync("alert", "New game started!");
    }
}