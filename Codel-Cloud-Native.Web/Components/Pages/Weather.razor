@page "/weather"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject WeatherApiClient WeatherApi

<PageTitle>Weather</PageTitle>

<h1>Current Weather</h1>

<p>This component shows current weather data from major cities around the world using OpenWeatherMap API.</p>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="RefreshWeather" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
        }
        Refresh Weather
    </button>
</div>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Location & Conditions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadWeatherData();
    }

    private async Task RefreshWeather()
    {
        await LoadWeatherData();
    }

    private async Task LoadWeatherData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            forecasts = await WeatherApi.GetWeatherAsync();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
